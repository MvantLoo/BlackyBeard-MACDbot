// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© CryptoMaster79

//@version=4
strategy("Macd-scalp", overlay=true)

// macd

fast_length = input(title="Fast Length", defval=12)
slow_length = input(title="Slow Length", defval=26)
src_macd = input(title="Source", defval=close)
signal_length = input(title="Signal Smoothing",  minval = 1, maxval = 50, defval = 9)
sma_source = input(title="Oscillator MA Type",  defval="EMA", options=["SMA", "EMA"])
sma_signal = input(title="Signal Line MA Type", defval="EMA", options=["SMA", "EMA"])


// Calculating
fast_ma = sma_source == "SMA" ? sma(src_macd, fast_length) : ema(src_macd, fast_length)
slow_ma = sma_source == "SMA" ? sma(src_macd, slow_length) : ema(src_macd, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? sma(macd, signal_length) : ema(macd, signal_length)
hist = macd - signal
hline(0, "Zero Line", color=color.new(#787B86, 50))
// plot(hist, title="Histogram", style=plot.style_columns, color=(hist>=0 ? (hist[1] < hist ? col_grow_above : col_fall_above) : (hist[1] < hist ? col_grow_below : col_fall_below)))
// plot(macd, title="MACD", color=col_macd)
// plot(signal, title="Signal", color=col_signal)

macdcross_long = macd and signal ? crossover(macd,signal) : false
macdcross_short = macd and signal > 0 ? crossunder(macd,signal) : false

if macdcross_long
    strategy.entry("Long", strategy.long)

if macdcross_short
    strategy.close("Long", strategy.long)


// Backtest Range

startDate = input(timestamp("2022-01-01T00:00:00"), type = input.time)
finishDate = input(timestamp("2022-08-31T00:00:00"), type = input.time)
